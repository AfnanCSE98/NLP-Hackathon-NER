# -*- coding: utf-8 -*-
"""annotated-named-entity-recognition-crf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17HWHBlsq2A7WOnVmnZ98ugjW7_riFWW2
"""

!pip install sklearn_crfsuite

import pandas as pd

from sklearn_crfsuite import CRF
from sklearn_crfsuite import metrics

def extract_sentence_features(df):
    sentence_length = len(df)

    for i in range(sentence_length):
        token = df.iloc[i]['Token']

        features = {
            'bias': 1.0,
            'token.lower()': token.lower(),
            'token.isupper()': token.isupper(),
            'token.istitle()': token.istitle(),
            'token.isdigit()': token.isdigit()
        }

        if i > 0:
            previous_token = df.iloc[i-1]['Token']
            features.update({
                'previous_token.lower()': previous_token.lower(),
                'previous_token.isupper()': previous_token.isupper(),
                'previous_token.istitle()': previous_token.istitle(),
                'previous_token.isdigit()': previous_token.isdigit()
            })
        else:
            features['BOS'] = True

        if i < sentence_length - 1:
            posterior_token = df.iloc[i+1]['Token']
            features.update({
                'posterior_token.lower()': posterior_token.lower(),
                'posterior_token.isupper()': posterior_token.isupper(),
                'posterior_token.istitle()': posterior_token.istitle(),
                'posterior_token.isdigit()': posterior_token.isdigit()
            })
        else:
            features['EOS'] = True

        yield features

def prepare(df, include_y=False):
    X, y = [], []
    for _, group_df in df.groupby(['PMID_Type', 'Sentence_Index']):
        X.append(list(extract_sentence_features(group_df)))
        if include_y:
            y.append(group_df['Tag'])
    if include_y:
        return X, y
    return X

train_df = pd.read_csv('/kaggle/input/chemdner-iob-annotated-chemical-named-etities/training.csv')
validation_df = pd.read_csv('/kaggle/input/chemdner-iob-annotated-chemical-named-etities/validation.csv')
evaluation_df = pd.read_csv('/kaggle/input/chemdner-iob-annotated-chemical-named-etities/evaluation.csv')

train_df.head()

train_df.info()

validation_df.info()

evaluation_df.info()

train_df['Token'].fillna('', inplace=True)
validation_df['Token'].fillna('', inplace=True)
evaluation_df['Token'].fillna('', inplace=True)

X_train, y_train = prepare(train_df, include_y=True)
X_validation, y_validation = prepare(validation_df, include_y=True)
X_evaluation, y_evaluation = prepare(evaluation_df, include_y=True)

len(X_train), len(y_train)

crf = CRF(
    algorithm='lbfgs',
    c1=0.1,
    c2=0.1,
    max_iterations=100,
    all_possible_transitions=True
)

crf.fit(X_train, y_train)

y_pred = crf.predict(X_validation)

print(metrics.flat_classification_report(y_validation, y_pred))